#!/usr/bin/env python3   

import paho.mqtt.client as mqtt
from random import *
from time import *
from datetime import datetime
#import struct
from threading import Thread

##### parametres global####
#id = randint(100,199);
id = "10";
stationType  = ["10","5","15"]
vitesse = ["0"];
heading = ["0","180"];
positions = ["1", "5","2","10"];
dt = datetime.now()
date = dt.strftime("%H%M%S")
split="/"


def sendinfo(vitesse,data):
  print("vitesse actuelle"+vitesse);
  if vitesse >= "90":
   sleep(5);  #1 s
   client.publish("test",data)
  else:
   sleep(2)  #0.1 s
   client.publish("test",data)

def generatedata(id,stationType,vitesseByte,position,dateByte):
  data =[]
  byte = bytearray(data)
  byte.extend(id)
  byte.extend(split)
  byte.extend(stationType)
  byte.extend(split)
  byte.extend(vitesseByte)
  byte.extend(split)
  byte.extend(position)
  byte.extend(split)
  byte.extend(datebyte)
  print("######## liste #######")
  print(byte.decode("utf-8"))
  print("######## byte list #######")
  print(byte)
  return byte



class Camion(Thread):
    def __init__(self, id):
        Thread.__init__(self)
        self.id = id

    def run(self):
        vitesse =choice(vitesse)
        vitesseByte =bytes(vitesse,"utf-8")
        stationType =bytes(choice(stationType),"utf-8")
        position = bytes(choice(positions),"utf-8")
        id = bytes(self.id,"utf-8")
        split = bytes(split,"utf-8")
        date =bytes(date,"utf-8")
        datebyte = bytearray(date)
        byte =generatedata(id,stationType,vitesseByte,position,datebyte)
        print("###### sending data #######")
        sendinfo(vitesse,byte)

########publisher#############
client = mqtt.Client()
client.connect("10.22.135.174",1883,60)


thread1= Camion("1")
thread2= Camion("2")
thread1.start()
thread2.start()
thread1.join()
thread2.join()
#vitesse =choice(vitesse)
#vitesseByte =bytes(vitesse,"utf-8")
#stationType =bytes(choice(stationType),"utf-8")
#position = bytes(choice(positions),"utf-8")
#id = bytes(id,"utf-8")
#split = bytes(split,"utf-8")
#date =bytes(date,"utf-8")
#datebyte = bytearray(date)
#byte =generatedata(id,stationType,vitesseByte,position,datebyte)
#print("###### sending data #######")
#sendinfo(vitesse,byte);
#client.publish("test", "sami")
#client.publish("topic/test",test)
client.disconnect()

